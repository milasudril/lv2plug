#!/usr/bin/env php
<?php
function exception_error_handler($errno, $errstr, $errfile, $errline ) {
    throw new ErrorException($errstr, $errno, 0, $errfile, $errline);
}
set_error_handler("exception_error_handler");

function outputRedirect(string $filename)
	{
	global $ob_file;
	$ob_file=fopen($filename,'w');
	function ob_file_callback($buffer)
		{
		global $ob_file;
		fwrite($ob_file,$buffer);
		}
	ob_start('ob_file_callback');
	}

function symbolFromName(string $name)
	{
//TODO: Use preg_split instead...
	$x=explode(' ',$name);
	return implode('_',$x);
	}

function typeGet($port)
	{
	$ret='';
	if($port->{'direction'}=='in')
		{$ret.='a lv2:InputPort,';}
	else
		{$ret.='a lv2:OutputPort,';}
	$typemap=array('MIDI'=>'atom:AtomPort'
		,'Audio'=>'lv2:AudioPort'
		,'Control'=>'lv2:ControlPort');
	$ret.=$typemap[$port->{'type'}];
	return $ret;
	}

if($argc<2)
	{
	error_log('No input file is specified');
	exit(-1);
	}

if($argc<3)
	{
	error_log('No target directory is specified');
	exit(-1);
	}

outputRedirect($argv[2].'/manifest.ttl');
$plugindata=json_decode(file_get_contents($argv[1]))->{'specification'};
?>
# This file has been generated by <?=$argv[0]?>

@prefix atom: <http://lv2plug.in/ns/ext/atom#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix lv2:  <http://lv2plug.in/ns/lv2core#> .
@prefix midi: <http://lv2plug.in/ns/ext/midi#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix urid: <http://lv2plug.in/ns/ext/urid#> .

#TODO Add UI

<<?=$plugindata->{'uri'}?>>
	a lv2:Plugin;
	a lv2:<?=$plugindata->{'type'}?>;
	lv2:binary <<?=$plugindata->{'binary'}?>>;
	doap:name "<?=$plugindata->{'name'}?>";
	doap:maintainer [foaf:name "<?=$plugindata->{'maintainer'}?>"; ];
	doap:license <<?=$plugindata->{'license'}?>>;

lv2:port
<?php foreach($plugindata->{'ports'} as $index=>$port) {?>
	[
	<?=typeGet($port)?>;
	lv2:index <?=$index?>;
	lv2:symbol "<?=symbolFromName($port->{'name'})?>";
	lv2:name "<?=$port->{'name'}?>";
<?php if($port->{'type'}=='Control') {?>
	lv2:minimum <?=$port->{'minimum'}?>;
	lv2:maximum <?=$port->{'maximum'}?>;
	lv2:default <?=$port->{'default'}?>;
<?php }?>
	]<?=$port==end($plugindata->{'ports'})?'.':','?>

<?php }?>
