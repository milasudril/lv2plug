#!/usr/bin/python3

import rdflib
import string
import sys
import os

template=string.Template('''//	This file has been generated by $scriptname
#ifndef LV2_PORTMAP_HPP
#define LV2_PORTMAP_HPP

namespace LV2_Portmap
	{$port_ids
	constexpr const char* port_names[]=
		{$port_names
		};
	}

#endif
''');

def write_error(*args, **kwargs):
	print(*args,file=sys.stderr,**kwargs)

def portDataLoad(manifest):
	g=rdflib.Graph().parse(manifest,format="turtle")

	port=rdflib.URIRef('http://lv2plug.in/ns/lv2core#port')
	port_symbol=rdflib.URIRef('http://lv2plug.in/ns/lv2core#symbol')
	port_index=rdflib.URIRef('http://lv2plug.in/ns/lv2core#index')
	port_name=rdflib.URIRef('http://lv2plug.in/ns/lv2core#name')
	ports=g.objects(subject=None,predicate=port)

	port_data={}
	for k in ports:
		symbol=g.objects(subject=k,predicate=port_symbol)
		index=g.objects(subject=k,predicate=port_index)
		name=g.objects(subject=k,predicate=port_name)
		port_data[int(next(index))]=( str(next(symbol)),str(next(name)) )
	return port_data

def portIdsBuild(port_data):
	retstr=[]
	for k in port_data:
		retstr.append('\n\tconstexpr unsigned int %s=%d;'%(port_data[k][0],k))
	return ''.join(retstr)

def portNamesBuild(port_data):
	retstr=[]
	for k in port_data:
		if k!=0:
			retstr.append('\n\t\t,"%s"'%(port_data[k][1]))
		else:
			retstr.append('\n\t\t "%s"'%(port_data[k][1]))
	return ''.join(retstr)

try:
	filename_in=sys.argv[1]
	filename_out=sys.argv[2]
	if os.path.isfile(filename_out):
		if os.path.getmtime(filename_out) >= os.path.getmtime(filename_in) \
			and os.path.getmtime(filename_out) >= os.path.getmtime(sys.argv[0]):
			sys.exit(0)

	port_data=portDataLoad(filename_in)
	keys=dict()
	keys['port_ids']=portIdsBuild(port_data)
	keys['port_names']=portNamesBuild(port_data)
	keys['scriptname']=sys.argv[0]
	with open(filename_out,mode='w') as filehandle:
		print('Writing %s\n'%(filename_out));
		filehandle.write(template.substitute(keys))
	sys.exit(0)

except Exception:
	write_error('%s: error: %s\n'%(sys.argv[0],sys.exc_info()[1]))
	sys.exit(2)
